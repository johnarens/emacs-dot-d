#+TITLE: A literate programming approach to customize emacs
#+AUTHOR: John Arens
#+EMAIL: john.w.arens@gmail.com

* Introduction

This file is used to customize emacs to my needs. The pattern is to
add one section per type of configuration and then make sure that
all modules and configuration are defined in it.

The organization of this file is greatly copied from Alexandre Patry
and Joost Diepenmaat and the code they shared at
https://github.com/apatry/emacs-dot-d and 
https://github.com/joodie/emacs-literal-config, respectively.

If you want to use this structure yourself, the easiest way to get
started is probably to clone this repository and move it at
=~/.emacs.d=. Make sure that no file is named =~/.emacs= as it would
be used instead of =~/.emacs.d/init.el= when emacs is starting.

* Prologue

Before we start actually configuring our environment, let's define
some utilities that will help us get organized:

#+BEGIN_SRC emacs-lisp
  ;; Initialize the package module
  (require 'package)
  (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                      (not (gnutls-available-p))))
         (url (concat (if no-ssl "http" "https") "://melpa.org/packages/")))
    (add-to-list 'package-archives (cons "melpa" url) t))
  (when (< emacs-major-version 24)
    ;; For important compatibility libraries like cl-lib
    (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/")))
  (package-initialize)

  ;; (package-initialize)
   
  ;; Add all the package repositories that we want to use.
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (add-to-list 'package-archives
               '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (add-to-list 'package-archives
               '("marmalade" . "https://marmalade-repo.org/packages/") t)
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.milkbox.net/packages/") t)
  ;; Reloading the list of packages takes time, we will do it at most
  ;; once. This variable will be true if the list has already be
  ;; reloaded.
  (setq my/package-refreshed nil)

  ;; Install a package if it is not already installed.
  (defun my/install (package)
    ; install the package if it is not already installed
    (unless (package-installed-p package)
      ; make sure the package index is up-to-date
      (unless my/package-refreshed
        (package-refresh-contents)
        (setq my/package-refreshed t))
      
      (package-install package)))
#+END_SRC

* Startup configuration

** Emacs GUI Display
Disable welcome screen on startup.
Free up screen space by getting rid of the toolbar.
Add column numbers to status line below.
Show open and closing parens.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
  (if (display-graphic-p)
      (tool-bar-mode -1))
  (column-number-mode 1)
  (show-paren-mode 1)
#+END_SRC

** Google Chrome Browser
#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "google-chrome")
#+END_SRC

** Time Display
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (display-time)
#+END_SRC


* GNU Global
#+BEGIN_SRC emacs-lisp
  ;; (setq load-path (cons "/home/simplex/svn/trunk" load-path))
  ;; (autoload 'gtags-mode "gtags" "" t)
  ;; (add-hook 'c-mode-common-hook
  ;;           (lambda ()
  ;;             (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
  ;;               (ggtags-mode 1))))
#+END_SRC

* IDO Mode
Interactively Do Things
https://www.masteringemacs.org/article/introduction-to-ido-mode
https://www.emacswiki.org/emacs/InteractivelyDoThings

#+BEGIN_SRC emacs-lisp
  (require 'ido)
  (setq ido-create-new-buffer 'always)
  (setq ido-file-extensions-order '(".org" ".py" ".sv" ".txt" ".emacs" ".xml" ".el" ".ini" ".cfg" ".cnf"))
  (ido-mode t)
#+END_SRC

* Org Mode

#+BEGIN_SRC emacs-lisp
  (setq org-startup-with-inline-images t)
  (setq org-file-apps
        '((auto-mode . emacs)
          ("\\.x?html?\\'" . "firefox %s")
          ("\\.pdf\\'" . "evince \"%s\"")
          ("\\.pdf::\\([0-9]+\\)\\'" . "evince \"%s\" -p %1")
          ("\\.pdf.xoj" . "xournal %s")))
  (defun my/fix-inline-images ()
    (when org-inline-image-overlays
      (org-redisplay-inline-images)))
  (add-hook 'org-babel-after-execute-hook 'my/fix-inline-images)
  ;; (org-display-inline-images t)
  ;; (add-hook 'org-babel-after-execute-hook'org-display-inline-images)
#+END_SRC

** Plant UML
http://plantuml.com/
https://emacs.stackexchange.com/questions/13107/replace-plantuml-source-with-generated-image-in-org-mode
https://github.com/skuro/plantuml-mode
https://github.com/alexmurray/flycheck-plantuml

#+BEGIN_SRC emacs-lisp
  (my/install 'plantuml-mode)
  (add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))
  (setq org-plantuml-jar-path (expand-file-name "~/bin/plantuml.jar"))
  (message "Plantuml done")
#+END_SRC


** Org Babel
#+BEGIN_SRC emacs-lisp
  (require 'org)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (ditaa . t)
     (dot . t)
     (emacs-lisp . t)
     (plantuml . t)
     (python . t)
     (sh . t)
     ))
  (setq org-confirm-babel-evaluate nil)
#+END_SRC


** Org Latex
*** Latex
**** Inline
#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/latex-overlay.elc")
#+END_SRC

**** Export
#+BEGIN_SRC emacs-lisp
  (setq org-export-latex-packages-alist '(("" "tikz")))
#+END_SRC

*** TikZ
#+BEGIN_SRC emacs-lisp
  (setq org-latex-packages-alist '())
  (add-to-list 'org-latex-packages-alist
               '("" "tikz" t))
  (eval-after-load "preview"
    '(add-to-list 'preview-default-preamble "\\PreviewEnvironment{tikzpicture}" t))
#+END_SRC

    

* Projectile
https://github.com/bbatsov/projectile
http://batsov.com/projectile/
https://projectile.readthedocs.io/en/latest/usage/

#+BEGIN_SRC emacs-lisp
  (my/install 'projectile)
  (require 'projectile)
  (projectile-global-mode)
#+END_SRC


* Python
** Install
Let's start by installing modes for python and python documentation:

#+BEGIN_SRC emacs-lisp
  (my/install 'python)
  (my/install 'sphinx-doc)
  (my/install 'sphinx-mode)
#+END_SRC

** Ipython
This will help us use ipython as our shell instead of python:

#+BEGIN_SRC emacs-lisp
  (when (executable-find "ipython")
    (setq python-shell-interpreter "ipython"
          python-shell-interpreter-args "--simple-prompt -i"))
#+END_SRC

** Jedi
http://tkf.github.io/emacs-jedi/released/

#+BEGIN_SRC emacs-lisp
  (my/install 'jedi)
  (my/install 'jedi-direx)
  (add-hook 'python-mode-hook 'jedi:setup)
  (setq jedi:setup-keys t)
  (setq jedi:complete-on-dot t)

  (add-to-list 'load-path "~/.emacs.d/lisp/")
  (load "jedi-direx")
  (eval-after-load "python"
    '(define-key python-mode-map "\C-cx" 'jedi-direx:pop-to-buffer))
  (add-hook 'jedi-mode-hook 'jedi-direx:setup)

  (setq jedi:server-args
        '("--sys-path" "~/anaconda2/lib/python2.7/site-packages"))
#+END_SRC
The first time you will need to =M-x jedi:install-server=.

** Pymacs
https://stackoverflow.com/questions/22665800/yet-another-pymacs-helper-did-not-start-within-30-seconds-but-with-more-debug

#+BEGIN_SRC emacs-lisp
  ;; (my/install 'pymacs)
  ;; (setq py-load-pymacs-p nil)
  (add-to-list 'load-path "~/.emacs.d/elisp/Pymacs")
  (require 'pymacs)
  (pymacs-load "ropemacs" "rope-")
#+END_SRC


* Shell Mode
Prevent backspacing over prompt.
Set the colors.

#+BEGIN_SRC emacs-lisp
  (setq comint-prompt-read-only t)
  (autoload 'ansi-color-for-comint-mode-on "ansi-color" nil t)
  (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
#+END_SRC



* Backups

By default, emacs save backup files in the same directory as the files
we are editing. Instead of adding files everywhere, let's use a
dedicated directory for these backups:

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . "~/.emacs.d/backups/")))
#+END_SRC

Let's also have more backup per file as suggested [[http://stackoverflow.com/a/151946][here]]:

#+BEGIN_SRC emacs-lisp
  (setq delete-old-versions t
    kept-new-versions 6
    kept-old-versions 2
    version-control t)
#+END_SRC

* Color theme

I am a big fan of the dark version of the [[http://ethanschoonover.com/solarized][solarized theme]]:

#+name: look-and-feel
#+BEGIN_SRC emacs-lisp
  (my/install 'color-theme-sanityinc-tomorrow)
  ;; (my/install 'solarized-theme)
  ;; (require 'solarized-theme)
  ;; 
  ;; (load-theme 'solarized-dark t)
#+END_SRC

* Git

Let's use magit to deal with git command from within emacs:

#+BEGIN_SRC emacs-lisp
  (my/install 'magit)
  (require 'magit)
#+END_SRC

We will also add git modification into the [[https://github.com/nonsequitur/git-gutter-plus][gutter]]:

#+BEGIN_SRC emacs-lisp
  (my/install 'git-gutter+)
  (require 'git-gutter+)
  
  ; enable git-gutter everywhere by default
  (global-git-gutter+-mode)
#+END_SRC

* Graphviz

#+BEGIN_SRC emacs-lisp
  (my/install 'graphviz-dot-mode)
#+END_SRC

* Groovy

Add support for groovy files:

#+BEGIN_SRC emacs-lisp
  (my/install 'groovy-mode)

  (require 'cl)
  (require 'groovy-mode)
#+END_SRC

* Javascript

Javascript mode is shipped by default with emacs, we just want to set
its configuration:

#+BEGIN_SRC emacs-lisp
 (setq js-indent-level 2)
#+END_SRC

* XML

XML is still useful sometimes, let's set us up for these cases:

#+BEGIN_SRC emacs-lisp
  (my/install 'auto-complete-nxml)
  (my/install 'rnc-mode)

  ;; Keystroke to popup help about something at point.
  (setq auto-complete-nxml-popup-help-key "C-:")

  ;; Keystroke to toggle on/off automatic completion.
  (setq auto-complete-nxml-toggle-automatic-key "C-c C-t")
#+END_SRC

* Epilogue
** Custom Key Bindings
#+BEGIN_SRC emacs-lisp
  (global-set-key [home] (quote beginning-of-buffer))
  (global-set-key [end] (quote end-of-buffer))
  (global-set-key [f12] (quote repeat-complex-command))
  ;; (global-set-key [f5] (quote kmacro-end-and-call-macro))

  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-cb" 'org-iswitchb)

  (define-key org-mode-map (kbd "$")
    (lambda ()
      (interactive)
      (insert "$")
      (save-excursion
        (left-char 1)
        (if (org-inside-LaTeX-fragment-p)
            (progn
              (right-char 2)
              (org-preview-latex-fragment))))))
#+END_SRC

** Custom values

  Let's store custom values in a dedicated file:

  #+BEGIN_SRC emacs-lisp
    (setq custom-file "~/.emacs.d/custom.el")
    (load custom-file)
  #+END_SRC
